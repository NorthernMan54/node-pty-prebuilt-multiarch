name: "Prebuild Binaries"

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        name: [
          # alpine-x86_64,
          # alpine-arm32v6,
          # alpine-arm64v8,
          # debian-x86_64,
          # debian-arm32v6,
          # debian-arm64v8,
          # darwin-x86_64,
          windows-x86_64,
        ]
        include:
          # - name: alpine-x86_64
          #   os: ubuntu-latest
          #   BASE_IMAGE: library/node:15-alpine
          #   DOCKERFILE: Dockerfile.alpine
          #   QEMU_ARCH: x86_64

          # - name: alpine-arm32v6
          #   os: ubuntu-latest
          #   BASE_IMAGE: arm32v6/node:15-alpine
          #   DOCKERFILE: Dockerfile.alpine
          #   QEMU_ARCH: arm

          # - name: alpine-arm64v8
          #   os: ubuntu-latest
          #   BASE_IMAGE: arm64v8/node:15-alpine
          #   DOCKERFILE: Dockerfile.alpine
          #   QEMU_ARCH: aarch64

          # - name: debian-x86_64
          #   os: ubuntu-latest
          #   BASE_IMAGE: library/debian:9.6-slim
          #   DOCKERFILE: Dockerfile.debian
          #   QEMU_ARCH: x86_64

          # - name: debian-arm32v6
          #   os: ubuntu-latest
          #   BASE_IMAGE: balenalib/raspberry-pi-debian:stretch
          #   DOCKERFILE: Dockerfile.debian
          #   QEMU_ARCH: arm

          # - name: debian-arm64v8
          #   os: ubuntu-latest
          #   BASE_IMAGE: arm64v8/debian:9.6-slim
          #   DOCKERFILE: Dockerfile.debian
          #   QEMU_ARCH: aarch64

          # - name: darwin-x86_64
          #   os: macOS-latest

          - name: windows-x86_64
            os: windows-latest

    steps: 
    - uses: actions/checkout@v1
    - uses: actions/setup-node@v1
      with:
        node-version: 15.x

    - name: Linux - Setup Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get --yes --no-install-recommends install binfmt-support qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static:register --reset

    - name: Linux - Build Docker Image
      if: runner.os == 'Linux'
      run: |
        docker build -f .prebuild/${{ matrix.DOCKERFILE }} --build-arg BASE_IMAGE=${{ matrix.BASE_IMAGE }} --build-arg QEMU_ARCH=${{ matrix.QEMU_ARCH }} -t multiarch-build .

    - name: Linux - Prebuild Binaries
      if: runner.os == 'Linux'
      run: |
        docker run --rm -v $(pwd):/node-pty multiarch-build

    - name: macOS - Prebuild Binaries
      if: runner.os == 'macOS'
      run: |
        npm install
        node .prebuild/build.js

    - name: Windows - Prebuild Binaries
      if: runner.os == 'Windows'
      run: |
        npm install
        node .prebuild/build.js
